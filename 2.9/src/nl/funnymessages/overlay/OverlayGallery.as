///////////////////////////////////////////////////////////
//  OverlayGallery.as
//  Macromedia ActionScript Implementation of the Class OverlayGallery
//  Generated by Enterprise Architect
//  Created on:      08-nov-2010 16:47:18
//  Original author: Wouter Tengeler
///////////////////////////////////////////////////////////

package nl.funnymessages.overlay
{
	import flash.display.Bitmap;
	import flash.display.Loader;
	import flash.display.SimpleButton;
	import flash.display.Sprite;
	import flash.display.DisplayObjectContainer;
	import flash.geom.Point;
	import flash.geom.Rectangle;
	import flash.net.URLRequest;
	import flash.net.URLVariables;
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.MouseEvent;
	import flash.text.AntiAliasType;
	import flash.text.TextField;
	import flash.text.TextFormat;
	import flash.text.TextFieldAutoSize;
	
	import nl.funnymessages.clipsender.ClipSender;
	
	import nl.themotionstudio.net.ServerRequest;
	import nl.themotionstudio.net.JsonServerRequest;
	import nl.themotionstudio.events.CustomEvent;
	import nl.themotionstudio.serialization.Serializer;
	
	import nl.themotionstudio.utils.Debug;
	
	/**
	 * @author Wouter Tengeler
	 * @version 1.0
	 * @created 08-nov-2010 16:47:18
	 */
	public class OverlayGallery extends Sprite
	{
		public static const THUMBNAIL_DRAG = 'thumbnailDrag';
		public static const THUMBNAIL_MOVE = 'thumbnailMove';
		public static const THUMBNAIL_DROP = 'thumbnailDrop';
		public static const ITEM_CLICK = 'itemClick';
		
		private static const LIST_WIDTH:uint = 77;
		private static const LIST_HEIGHT:uint = 75;
		
		
		//private var m_sTitle:String;
		//private var m_txtTitle:TextField;
		private var m_sGalleryKey:String;
		private var m_aItems:Object;							// list of gallery items
		private var m_aItemOrder:Array;							// list of item keys in the order to show them in the gallery
	    private var m_oContainer: DisplayObjectContainer;
		private var m_sprListContainer:Sprite;					// Container of the actual list without up and down arrows
		private var m_sprList:Sprite;							// Container of the total gallery
		private var m_sprThumb:Sprite;
		private var m_btnArrowUp:SimpleButton;
		private var m_btnArrowDown:SimpleButton;
		private var m_iScrollAmount:uint;
		private var m_iListHeight:int;
		private var m_bThumbDragging:Boolean;
		private var m_sSelected:String;							// key of item that is to be selected on next update
		
		public function OverlayGallery():void {
			//Debug.addClass('OverlayGallery');
			m_sGalleryKey = '';
			m_sSelected = '';
			m_iListHeight = 0;
			m_bThumbDragging = false;
			m_aItems = new Object();
			m_aItemOrder = new Array();
			// create list title
			/*
			m_sTitle = p_sTitle;
			m_txtTitle = createTextField(new TextFormat('Arial', 12, 0x666666));
			m_txtTitle.text = m_sTitle;
			addChild(m_txtTitle);
			*/
			// create the gallery list
			initList();
			addChild(m_sprList);
			// create the thumbnail
			initThumbnail();
			addChild(m_sprThumb);
			m_iScrollAmount = 0;
		}
		
		/**
		 * set the containg clip
		 */
		public function set container(p_oContainer:DisplayObjectContainer):void {
			m_oContainer = p_oContainer;
		}
		
		public function get container():DisplayObjectContainer {
			return m_oContainer;
		}
		
		public function get selectedItem():String {
			return m_sSelected;
		}
		
		public function get galleryKey():String {
			return m_sGalleryKey;
		}
		
	    public function hide(): void
	    {
			if ((null != m_oContainer) && (m_oContainer.contains(this))) {
				m_oContainer.removeChild(this);
			}
	    }

	    public function show(): void
	    {
			if ((null != m_oContainer) && (!m_oContainer.contains(this))) {
				m_oContainer.addChild(this);
			}
	    }
		
		public function layout():void {
			/*
			if (null != m_txtTitle) {
				m_txtTitle.x = 1;
				m_txtTitle.y = 1;
			}
			*/
			if (null != m_sprList) {
				m_sprList.x = 0;
				m_sprList.y = 0;
			}
			if (null != m_sprListContainer) {
				m_sprListContainer.x = 1;
				m_sprListContainer.y = 8;
			}
			if (null != m_sprThumb) {
				m_sprThumb.x = 72;
				m_sprThumb.y = 0;
			}
			if (null != m_btnArrowUp) {
				m_btnArrowUp.x = 1;
				m_btnArrowUp.y = 0;
			}
			if (null != m_btnArrowDown) {
				m_btnArrowDown.x = 1;
				m_btnArrowDown.y = 88;
			}
		}
		
		/**
		 * load a gallery with the given key
		 * @param String p_sKey
		 */
		public function load(p_sKey:String):void {
			Debug.traceInfo('OverlayGallery', 'load', 'key', p_sKey);
			m_sGalleryKey = p_sKey;
			clear();
			loadGalleryInfo();
		}
		
		/**
		 * load the gallery and update the changes
		 */
		public function update():void {
			Debug.traceInfo('OverlayGallery', 'update', 'key', m_sGalleryKey);
			if (m_sGalleryKey.length > 0) {
				loadGalleryInfo();
			}
		}

		public function selectItem(p_sKey:String):void {
			if (p_sKey != m_sSelected) {
				m_sSelected = p_sKey;
			}
			/*
			if (undefined != m_aItems[p_sKey]) {
				m_aItems[p_sKey].textField.setTextFormat(new TextFormat('Arial', 12, 0x00cc00));
				m_aItems[p_sKey].selected = true;
				if ((null != m_aItems[p_sKey].image) && (!m_sprThumb.contains(m_aItems[p_sKey].image))) {
					m_sprThumb.addChild(m_aItems[p_sKey].image);
				}
			}
			*/
		}

		public function deselectItem(p_sKey:String):void {
			if (p_sKey == m_sSelected) {
				m_sSelected = '';
			}
			/*
			if (undefined != m_aItems[p_sKey]) {
				m_aItems[p_sKey].textField.setTextFormat(new TextFormat('Arial', 12, 0x999999));
				m_aItems[p_sKey].selected = false;
				if (m_sprThumb.contains(m_aItems[p_sKey].image)) {
					m_sprThumb.removeChild(m_aItems[p_sKey].image);
				}
			}
			*/
		}
		
		
		public function loadGalleryInfo():void {
			var sFile:String = 'gallery'; 
			var oParams:URLVariables = new URLVariables();
			oParams.user = m_sGalleryKey;
			var oLoader:JsonServerRequest = new JsonServerRequest('', sFile);
			oLoader.addEventListener(ServerRequest.REQUEST_OK, onLoadGalleryInfo);
			oLoader.addEventListener(ServerRequest.REQUEST_FAILED, onLoadGalleryInfoFailed);
			oLoader.doRequest(oParams);
		}
		
		
		private function initList():void {
			Debug.traceInfo('OverlayGallery', 'initList');
			// create the list elements
			m_sprList = new Sprite();
			m_sprListContainer = new Sprite();
			m_sprListContainer.scrollRect = new Rectangle(0, 0, LIST_WIDTH, LIST_HEIGHT);
			m_sprList.addChild(m_sprListContainer);
			// add the scroll arrows
			m_btnArrowUp = new BtnUp();
			m_btnArrowDown = new BtnDown();
			m_sprList.addChild(m_btnArrowUp);
			m_sprList.addChild(m_btnArrowDown);
			updateList();
		}
		
		private function updateList():void {
			// add all new items
			var sKey:String;
			for (sKey in m_aItems) {
				if (null == m_aItems[sKey].textField) {
					Debug.traceInfo('OverlayGallery', 'updateList', 'adding');
					m_aItems[sKey].textField = createTextField(new TextFormat('Arial', 12, 0x999999));
					m_aItems[sKey].textField.text = m_aItems[sKey].name;
					m_aItems[sKey].textField.addEventListener(MouseEvent.CLICK, onListItemClicked);
					m_sprListContainer.addChild(m_aItems[sKey].textField);
				}
			}
			// sort the item order on date created
			//m_aItemOrder.sort(Array.DESCENDING);
			m_aItemOrder.sortOn('date', Array.DESCENDING);
			Debug.traceInfo('OverlayGallery', 'updateList', 'sorted', m_aItemOrder);
			
			// position the items
			m_iListHeight = 0;
			var iPosX = 5;
			var iPosY = 0;
			for each (var oItem:Object in m_aItemOrder) {
				sKey = oItem.key;
				if (null != m_aItems[sKey].textField) {
					m_aItems[sKey].textField.x = iPosX;
					m_aItems[sKey].textField.y = iPosY;
					iPosY += m_aItems[sKey].textField.textHeight + 2;
					// set maximum height as scroll amount
					if (m_aItems[sKey].textField.textHeight + 2> m_iScrollAmount) {
						m_iScrollAmount = m_aItems[sKey].textField.textHeight + 2;
					}
				}
			}
			m_iListHeight = iPosY;
			// update the arrows
			updateArrows();
			updateItemSelection();
		}
		
		private function updateArrows():void {
			Debug.traceInfo('OverlayGallery', 'updateArrows-' + m_sGalleryKey, 'container', m_sprListContainer.width  + ', ' + m_sprListContainer.height + ' scroll ' + m_sprListContainer.scrollRect.toString());
			if (m_sprListContainer.scrollRect.y > 0) {
				if (!m_btnArrowUp.enabled) {
					// change state
					m_btnArrowUp.removeEventListener(MouseEvent.CLICK, onUpArrowClicked);
					m_sprList.removeChild(m_btnArrowUp);
					m_btnArrowUp = new BtnUp();
					m_btnArrowUp.addEventListener(MouseEvent.CLICK, onUpArrowClicked);
					m_sprList.addChild(m_btnArrowUp);
					m_btnArrowUp.enabled = true;
				}
			} else {
				if (m_btnArrowUp.enabled) {
					// change state
					m_btnArrowUp.removeEventListener(MouseEvent.CLICK, onUpArrowClicked);
					m_sprList.removeChild(m_btnArrowUp);
					m_btnArrowUp = new BtnUpDisabled();
					m_btnArrowUp.addEventListener(MouseEvent.CLICK, onUpArrowClicked);
					m_sprList.addChild(m_btnArrowUp);
					m_btnArrowUp.enabled = false;
				}
			}
			if (m_sprListContainer.scrollRect.y + m_sprListContainer.scrollRect.height < m_iListHeight) {
				if (!m_btnArrowDown.enabled) {
					// change state
					m_btnArrowDown.removeEventListener(MouseEvent.CLICK, onDownArrowClicked);
					m_sprList.removeChild(m_btnArrowDown);
					m_btnArrowDown = new BtnDown();
					m_btnArrowDown.addEventListener(MouseEvent.CLICK, onDownArrowClicked);
					m_sprList.addChild(m_btnArrowDown);
					m_btnArrowDown.enabled = true;
				}
			} else {
				if (m_btnArrowDown.enabled) {
					// change state
					m_btnArrowDown.removeEventListener(MouseEvent.CLICK, onDownArrowClicked);
					m_sprList.removeChild(m_btnArrowDown);
					m_btnArrowDown = new BtnDownDisabled();
					m_btnArrowDown.addEventListener(MouseEvent.CLICK, onDownArrowClicked);
					m_sprList.addChild(m_btnArrowDown);
					m_btnArrowDown.enabled = false;
				}
			}
			layout();
		}
		
		private function updateItemSelection():void {
			Debug.traceInfo('OverlayGallery', 'updateItemSelection-' + m_sGalleryKey, 'selected', m_sSelected);
			for (var sKey:String in m_aItems) {
				if (m_aItems[sKey].selected) {
					if (m_sSelected != sKey) {
						// item was selected, now unselect
						m_aItems[sKey].textField.setTextFormat(new TextFormat('Arial', 12, 0x999999));
						m_aItems[sKey].selected = false;
						if ((null != m_aItems[sKey].image) && m_sprThumb.contains(m_aItems[sKey].image)) {
							m_sprThumb.removeChild(m_aItems[sKey].image);
						}
					}
				} else {
					if (m_sSelected == sKey) {
						// was not selected, select it
						m_aItems[sKey].textField.setTextFormat(new TextFormat('Arial', 12, 0x00cc00));
						if ((null != m_aItems[sKey].image) && (!m_sprThumb.contains(m_aItems[sKey].image))) {
							m_sprThumb.addChild(m_aItems[sKey].image);
							m_aItems[sKey].selected = true;
						}
					}
				}
			}
			
		}
		
		private function initThumbnail():void {
			m_sprThumb = new Sprite();
			m_sprThumb.addEventListener(MouseEvent.MOUSE_DOWN, onThumbMouseDown);
			m_sprThumb.addEventListener(MouseEvent.MOUSE_UP, onThumbMouseUp);
			m_sprThumb.addEventListener(MouseEvent.MOUSE_MOVE, onThumbMouseMove);
		}
		
		private function onLoadGalleryInfo(p_oEvent:CustomEvent):void {
			Debug.traceInfo('OverlayGallery', 'onLoadGalleryInfo-' + m_sGalleryKey, 'data', p_oEvent.eventObj);
			try {
				if (undefined != p_oEvent.eventObj.data) {
					var oData:Object = Serializer.decodeSave(String(p_oEvent.eventObj.data));
					if (null != oData) {
						var oItem:Object = null;
						Debug.traceInfo('OverlayGallery', 'onLoadGalleryInfo-' + m_sGalleryKey, 'gallery', oData);
						for each (oItem in oData) {
							if (undefined != oItem.key) {
								//Debug.traceInfo('OverlayGallery', 'onLoadGalleryInfo-' + m_sGalleryKey, 'key', oItem.key);
								//Debug.traceInfo('OverlayGallery', 'onLoadGalleryInfo-' + m_sGalleryKey, 'name', oItem.name);
								if (undefined == m_aItems[oItem.key]) {
									// item is new, add it
									m_aItems[oItem.key] = new Object();
									m_aItems[oItem.key].key = oItem.key;
									m_aItems[oItem.key].name = oItem.name;
									m_aItems[oItem.key].thumb = oItem.thumb;
									m_aItems[oItem.key].date = oItem.date;
									m_aItems[oItem.key].textField = null;
									m_aItems[oItem.key].image = null;
									m_aItems[oItem.key].selected = false;
									
									// add item to the item order array
									m_aItemOrder.push({key:oItem.key, name:oItem.name, date:oItem.date});
									
									// start loading the thumbnail
									var oLoader:Loader = new Loader();
									oLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onThumbLoaded);
									oLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onThumbLoadFailed);
									
									m_aItems[oItem.key].loader = oLoader;
									// thumb already contains subdirs
									var sUrl:String = ServerRequest.createUrl('', m_aItems[oItem.key].thumb, 'http');
									oLoader.load(new URLRequest(sUrl));
									
								} else {
									// item already exists, do nothing
								}
							}
						}
						// select first item initially if no item was selected
						if (m_sSelected.length == 0) {
							m_sSelected = m_aItemOrder[0].key;
						}
						updateList();
					}
				} else {
					// data element not found
					Debug.traceInfo('OverlayGallery', 'onLoadGalleryInfo-' + m_sGalleryKey, 'Error', 'data not found in response');
					clear();
				}
			} catch (e:Error) {
				// some error occurred, ignore this gallery
				Debug.traceInfo('OverlayGallery', 'onLoadGalleryInfo-' + m_sGalleryKey, 'Error', e.message);
				clear();
			}
		}
		
		private function onLoadGalleryInfoFailed(p_oEvent:CustomEvent):void {
			Debug.traceInfo('OverlayGallery', 'onLoadGalleryInfoFailed-' + m_sGalleryKey, 'message', p_oEvent.eventObj.message);
			clear();
		}
		
		private function onThumbLoaded(p_oEvent:Event):void {
			Debug.traceInfo('OverlayGallery', 'onThumbLoaded-' + m_sGalleryKey, p_oEvent.target);
			// find the loader that is ready
			var sItemKey:String = '';
			for (var sKey:String in m_aItems) {
				if ((m_aItems[sKey].loader != null) && (m_aItems[sKey].loader.contentLoaderInfo === p_oEvent.target)) {
					sItemKey = sKey;
					break;
				}
			}
			if (sItemKey.length > 0) {
				// found the loader
				p_oEvent.target.removeEventListener(Event.COMPLETE, onThumbLoaded);
				p_oEvent.target.removeEventListener(IOErrorEvent.IO_ERROR, onThumbLoadFailed);
				m_aItems[sItemKey].loader = null;
				m_aItems[sItemKey].image = Bitmap(p_oEvent.target.content);
				// show image if it was already selected
				// the image could still be loading while the item was selected
				if (m_aItems[sItemKey].selected) {
					selectItem(sItemKey);
				}
				
			} else {
				// loader was not found, ignore it
			}
			updateList();
		}

		private function onThumbLoadFailed(p_oEvent:IOErrorEvent):void {
			Debug.traceInfo('OverlayGallery', 'onThumbLoadFailed-' + m_sGalleryKey, 'message', p_oEvent.text);
			// find the loader that is ready
			var sItemKey:String = '';
			for (var sKey:String in m_aItems) {
				if ((m_aItems[sKey].loader != null) && (m_aItems[sKey].loader.contentLoaderInfo === p_oEvent.target)) {
					sItemKey = sKey;
					break;
				}
			}
			if (sItemKey.length > 0) {
				p_oEvent.target.removeEventListener(Event.COMPLETE, onThumbLoaded);
				p_oEvent.target.removeEventListener(IOErrorEvent.IO_ERROR, onThumbLoadFailed);
				m_aItems[sItemKey].loader = null;
			}
		}
		
		private function onUpArrowClicked(p_oEvent:MouseEvent):void {
			// event always arives, even when button is disabled
			if (p_oEvent.target.enabled) {
				Debug.traceInfo('OverlayGallery', 'onUpArrowClicked-' + m_sGalleryKey);
				var rctScroll:Rectangle = m_sprListContainer.scrollRect;
				rctScroll.y -= m_iScrollAmount;
				m_sprListContainer.scrollRect = rctScroll;
				updateArrows();
			}
		}

		private function onDownArrowClicked(p_oEvent:MouseEvent):void {
			// event always arives, even when button is disabled
			if (p_oEvent.target.enabled) {
				Debug.traceInfo('OverlayGallery', 'onDownArrowClicked-' + m_sGalleryKey);
				var rctScroll:Rectangle = m_sprListContainer.scrollRect;
				rctScroll.y += m_iScrollAmount;
				m_sprListContainer.scrollRect = rctScroll;
				updateArrows();
			}
		}
		
		private function onListItemClicked(p_oEvent:MouseEvent):void {
			Debug.traceInfo('OverlayGallery', 'onListItemClicked-' + m_sGalleryKey);
			for (var sKey:String in m_aItems) {
				if (m_aItems[sKey].textField === p_oEvent.target) {
					// found target textfield
					if ((!m_aItems[sKey].selected)) {
						// item was not selected 
						selectItem(sKey);
						var oData:Object = new Object();
						oData.key = sKey;
						dispatchEvent(new CustomEvent(OverlayGallery.ITEM_CLICK, false, false, oData));
					}
				} else {
					// textfield is not target
					if ((m_aItems[sKey].selected)) {
						// item was selected but not anymore
						deselectItem(sKey);
					}
				}
			}
			updateItemSelection();
		}
		
		private function onThumbMouseDown(p_oEvent:MouseEvent):void {
			m_sprThumb.startDrag();
			m_bThumbDragging = true;
			
		}
		private function onThumbMouseUp(p_oEvent:MouseEvent):void {
			m_sprThumb.stopDrag();
			m_bThumbDragging = false;
			
			// send message to screen about drop of thumbnail
			var oData:Object = new Object();
			oData.itemKey = selectedItem;
			oData.image = m_aItems[oData.itemKey].image;
			var pntGlobal:Point = new Point(oData.image.x, oData.image.y);
			oData.position = pntGlobal;
			dispatchEvent(new CustomEvent(OverlayGallery.THUMBNAIL_DROP, false, false, oData));
			// return thumbnail to original position
			layout();
			//m_sprThumb.x = 135;
			//m_sprThumb.y = 0;
		}
		
		private function onThumbMouseMove(p_oEvent:MouseEvent):void {
			if (m_bThumbDragging) {
				var oData:Object = new Object();
				var pntGlobal:Point = new Point(p_oEvent.stageX, p_oEvent.stageY);
				oData.position = pntGlobal;
				oData.itemKey = selectedItem;
				oData.image = m_aItems[oData.itemKey].image;
				dispatchEvent(new CustomEvent(OverlayGallery.THUMBNAIL_MOVE, false, false, oData));
			}
		}
		
		private function clear():void {
			for (var sKey:String in m_aItems) {
				if ((null != m_aItems[sKey].textField) && (m_sprListContainer.contains(m_aItems[sKey].textField))) {
					m_sprListContainer.removeChild(m_aItems[sKey].textField);
				}
				if ((null != m_aItems[sKey].image) && (m_sprThumb.contains(m_aItems[sKey].image))) {
					m_sprThumb.removeChild(m_aItems[sKey].image);
				}
				m_aItems[sKey].textField.removeEventListener(MouseEvent.CLICK, onListItemClicked);
				m_aItems[sKey].textField = null;
				m_aItems[sKey].image = null;

				delete m_aItems[sKey];
			}
			m_aItems = new Object();
		}
		
		private function createTextField(p_oTextFormat:TextFormat):TextField {
			var txtField:TextField = new TextField();
			txtField.selectable = false;
			txtField.defaultTextFormat = p_oTextFormat;
			txtField.autoSize = TextFieldAutoSize.LEFT;
			// use embedded font
			txtField.embedFonts = true;
			txtField.antiAliasType = AntiAliasType.ADVANCED;
			return txtField;
		}
		

	}//end OverlayGallery

}