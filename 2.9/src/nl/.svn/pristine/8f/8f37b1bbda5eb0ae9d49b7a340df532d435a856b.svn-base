///////////////////////////////////////////////////////////
//  ClipLoader.as
//  Macromedia ActionScript Implementation of the Class ClipLoader
//  Generated by Enterprise Architect
//  Created on:      18-okt-2010 13:03:59
//  Original author: Wouter Tengeler
///////////////////////////////////////////////////////////

package nl.funnymessages.clip
{
	import flash.display.Loader;
	import flash.display.MovieClip;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.ProgressEvent;
	import flash.net.URLRequest;
	import flash.system.LoaderContext;
	import flash.utils.getQualifiedClassName;
	import fl.controls.ProgressBar;
	import fl.controls.ProgressBarMode;
	import fl.controls.ProgressBarDirection;

	import nl.funnymessages.clipcontainer.ClipContainer;
	import nl.funnymessages.clipplayer.ClipPlayer;
	import nl.themotionstudio.events.CustomEvent;
	
	import nl.themotionstudio.utils.Debug;
	/**
	 * @author Wouter Tengeler
	 * @version 1.0
	 * @created 18-okt-2010 13:03:59
	 */
	public class ClipLoader extends Sprite
	{
		public static const LOAD_OK : String     = 'loadOk';
		public static const LOAD_FAILED : String = 'loadFailed';
		
		//private var m_oClip:ClipContainer;
		private var m_oClip:MovieClip;
		private var m_oProgressBar:ProgressBar;
		private var m_oLoader:Loader;

	    /**
		 * 
		 * @param p_sKey
		 */
	    public function ClipLoader(): void
	    {
			Debug.addClass('ClipLoader');
			Debug.traceInfo('ClipLoader', 'constructor');
			super();
			m_oClip = null;
			m_oProgressBar = new ProgressBar();
			m_oProgressBar.mode = ProgressBarMode.MANUAL;
			m_oProgressBar.direction = ProgressBarDirection.RIGHT;
			m_oProgressBar.minimum = 0;
			m_oProgressBar.setSize(300, 20);
			m_oLoader = new Loader();
	    }

		/**
		 * add own event handlers 
		 * @param	request
		 * @param	context
		 */
		public function load(request:URLRequest, context:LoaderContext = null):void {
			addListeners();
			m_oProgressBar.x = (ClipPlayer.CLIP_WIDTH - m_oProgressBar.width) / 2;
			m_oProgressBar.y = (ClipPlayer.CLIP_HEIGHT - m_oProgressBar.height) / 2;
			m_oProgressBar.source = m_oLoader;
			addChild(m_oProgressBar);
			// add anticaching to url
			//request.url += '?c=' + int(Math.random() * 999999);
			Debug.traceInfo('ClipLoader', 'load', 'url', request.url);
			m_oLoader.load(request);
		}
		
		
		public function get clip():MovieClip {
			return m_oClip;
		}

		/**
		 * handler called when the loaded movie is initialized, meaning the properties can be accessed
		 * @param Event p_oEvent
		 */
		private function onInit(p_oEvent:Event):void {
			Debug.traceInfo('ClipLoader', 'onInit', 'clip type', p_oEvent.target.contentType);
			// stop playing the movie before it has started
			var oClip:MovieClip = p_oEvent.target.content as MovieClip;
			oClip.stop();
		}

		private function onComplete(p_oEvent:Event):void {
			Debug.traceInfo('ClipLoader', 'onComplete', 'clip type', p_oEvent.target.contentType);
			Debug.traceInfo('ClipLoader', 'onComplete', 'clip class type', getQualifiedClassName( p_oEvent.target.content ));
			if (contains(m_oProgressBar)) {
				removeChild(m_oProgressBar);
			}
			removeListeners();
			if (p_oEvent.target.contentType == 'application/x-shockwave-flash') {
				if (p_oEvent.target.content is MovieClip) {
					m_oClip = p_oEvent.target.content as MovieClip;
					if (null != m_oClip) {
						Debug.traceInfo('ClipLoader', 'onComplete', 'clip object not null');
						dispatchEvent(new CustomEvent(LOAD_OK));
					} else {
						handleError('Loaded clib object is null');
					}
				} else {
					handleError('clip is no ClipContainer: ' + getQualifiedClassName( p_oEvent.target.content ));
				}
			} else {
				handleError('clip is no clip object');
			}
		}
		
		private function onIOError(p_oEvent:IOErrorEvent):void {
			Debug.traceInfo('ClipLoader', 'onIOError');
			removeListeners();
			handleError(p_oEvent.text);
		}
		
		/**
		 * 
		 * @param ProgressEvent p_oEvent
		 * @todo implement progressbar
		 */
		private function onProgress(p_oEvent:ProgressEvent):void {
			var iProgress:int = Math.floor((p_oEvent.bytesLoaded / p_oEvent.bytesTotal) * 100);
			//Debug.traceInfo('ClipLoader', 'onProgress', 'progress', );
			m_oProgressBar.setProgress(iProgress, 100);
		}
		
		/**
		 * handle errors
		 * default, an event is sent containg the error
		 */
		protected function handleError(p_sMessage:String):void {
			var oData:Object = new Object();
			oData.message = p_sMessage;
			dispatchEvent(new CustomEvent(LOAD_FAILED,false, false, oData));
		}
		
		private function addListeners():void {
			m_oLoader.contentLoaderInfo.addEventListener(Event.INIT, onInit);
			m_oLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete);
			m_oLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
			m_oLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onProgress);
		}
		
		private function removeListeners():void {
			m_oLoader.contentLoaderInfo.removeEventListener(Event.INIT, onInit);
			m_oLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onComplete);
			m_oLoader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);
			m_oLoader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, onProgress);
		}
		
		override public function toString():String {
			var sObject:String = 'ClipLoader : \n';
			sObject += 'clip: ' + m_oClip.name;
			return sObject;
		}
	}
}